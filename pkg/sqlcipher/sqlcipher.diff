diff --git Makefile.in Makefile.in
index ce2617c7..933e4612 100644
--- Makefile.in
+++ Makefile.in
@@ -157,6 +157,7 @@ CRYPTOSRC = \
   $(TOP)/src/sqlcipher.h \
   $(TOP)/src/crypto.c \
   $(TOP)/src/crypto_impl.c \
+	$(TOP)/src/crypto_go.c \
 	$(TOP)/src/crypto_libtomcrypt.c \
 	$(TOP)/src/crypto_nss.c \
 	$(TOP)/src/crypto_openssl.c \
diff --git src/crypto.h src/crypto.h
index cdd973ca..d99abbd4 100644
--- src/crypto.h
+++ src/crypto.h
@@ -77,6 +77,7 @@ void sqlite3pager_reset(Pager *pPager);
 /* end extensions defined in pager.c */
 
 #if !defined (SQLCIPHER_CRYPTO_CC) \
+   && !defined (SQLCIPHER_CRYPTO_GO) \
    && !defined (SQLCIPHER_CRYPTO_LIBTOMCRYPT) \
    && !defined (SQLCIPHER_CRYPTO_NSS) \
    && !defined (SQLCIPHER_CRYPTO_OPENSSL)
diff --git src/crypto_go.c src/crypto_go.c
new file mode 100644
index 00000000..a9008bb5
--- /dev/null
+++ src/crypto_go.c
@@ -0,0 +1,188 @@
+/*
+ * Copyright (c) 2023 Tim van der Molen <tim@kariliq.nl>
+ *
+ * Permission to use, copy, modify, and distribute this software for any
+ * purpose with or without fee is hereby granted, provided that the above
+ * copyright notice and this permission notice appear in all copies.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
+ * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
+ * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
+ * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
+ * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
+ * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
+ * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
+ */
+
+#if defined(SQLITE_HAS_CODEC) && defined(SQLCIPHER_CRYPTO_GO)
+
+#include "crypto.h"
+#include "sqlcipher.h"
+
+#include "_cgo_export.h"
+
+static int
+sqlcipher_go_activate(void *ctx)
+{
+	return SQLITE_OK;
+}
+
+static int
+sqlcipher_go_deactivate(void *ctx)
+{
+	return SQLITE_OK;
+}
+
+static int
+sqlcipher_go_ctx_init(void **ctx)
+{
+	return sqlcipherGoInit();
+}
+
+static int
+sqlcipher_go_ctx_free(void **ctx)
+{
+	return sqlcipherGoFree();
+}
+
+static const char *
+sqlcipher_go_get_provider_name(void *ctx)
+{
+	return sqlcipherGoGetProviderName();
+}
+
+static const char *
+sqlcipher_go_get_provider_version(void *ctx)
+{
+	return sqlcipherGoGetProviderVersion();
+}
+
+static int
+sqlcipher_go_add_random(void *ctx, void *buf, int buf_sz)
+{
+	return sqlcipherGoAddRandom(buf, buf_sz);
+}
+
+static int
+sqlcipher_go_random(void *ctx, void *buf, int buf_sz)
+{
+	return sqlcipherGoRandom(buf, buf_sz);
+}
+
+static int
+sqlcipher_go_hmac(void *ctx, int alg, unsigned char *key, int key_sz,
+    unsigned char *in, int in_sz, unsigned char *in2, int in2_sz,
+    unsigned char *out)
+{
+	switch (alg) {
+	case SQLCIPHER_HMAC_SHA1:
+		return sqlcipherGoHMACSHA1(key, key_sz, in, in_sz, in2,
+		    in2_sz, out);
+	case SQLCIPHER_HMAC_SHA256:
+		return sqlcipherGoHMACSHA256(key, key_sz, in, in_sz, in2,
+		    in2_sz, out);
+	case SQLCIPHER_HMAC_SHA512:
+		return sqlcipherGoHMACSHA512(key, key_sz, in, in_sz, in2,
+		    in2_sz, out);
+	default:
+		return SQLITE_ERROR;
+	}
+}
+
+static int
+sqlcipher_go_kdf(void *ctx, int alg, const unsigned char *pass, int pass_sz,
+    unsigned char *salt, int salt_sz, int workfactor, int key_sz,
+    unsigned char *key)
+{
+	switch (alg) {
+	case SQLCIPHER_HMAC_SHA1:
+		return sqlcipherGoKDFSHA1((unsigned char *)pass, pass_sz,
+		    salt, salt_sz, workfactor, key, key_sz);
+	case SQLCIPHER_HMAC_SHA256:
+		return sqlcipherGoKDFSHA256((unsigned char *)pass, pass_sz,
+		    salt, salt_sz, workfactor, key, key_sz);
+	case SQLCIPHER_HMAC_SHA512:
+		return sqlcipherGoKDFSHA512((unsigned char *)pass, pass_sz,
+		    salt, salt_sz, workfactor, key, key_sz);
+	default:
+		return SQLITE_ERROR;
+	}
+}
+
+static int
+sqlcipher_go_cipher(void *ctx, int mode, unsigned char *key, int key_sz,
+    unsigned char *iv, unsigned char *in, int in_sz, unsigned char *out)
+{
+	return sqlcipherGoCipher(key, key_sz, iv, in, in_sz, out,
+	    mode == CIPHER_ENCRYPT);
+}
+
+static const char *
+sqlcipher_go_get_cipher(void *ctx)
+{
+	return sqlcipherGoGetCipher();
+}
+
+static int
+sqlcipher_go_get_key_sz(void *ctx)
+{
+	return sqlcipherGoGetKeySize();
+}
+
+static int
+sqlcipher_go_get_iv_sz(void *ctx)
+{
+	return sqlcipherGoGetIVSize();
+}
+
+static int
+sqlcipher_go_get_block_sz(void *ctx)
+{
+	return sqlcipherGoGetBlockSize();
+}
+
+static int
+sqlcipher_go_get_hmac_sz(void *ctx, int alg)
+{
+	switch (alg) {
+	case SQLCIPHER_HMAC_SHA1:
+		return sqlcipherGoGetHMACSizeSHA1();
+	case SQLCIPHER_HMAC_SHA256:
+		return sqlcipherGoGetHMACSizeSHA256();
+	case SQLCIPHER_HMAC_SHA512:
+		return sqlcipherGoGetHMACSizeSHA512();
+	default:
+		return 0;
+	}
+}
+
+static int
+sqlcipher_go_fips_status(void *ctx)
+{
+	return sqlcipherGoFIPSStatus();
+}
+
+int
+sqlcipher_go_setup(sqlcipher_provider *p)
+{
+	p->activate = sqlcipher_go_activate;
+	p->deactivate = sqlcipher_go_deactivate;
+	p->get_provider_name = sqlcipher_go_get_provider_name;
+	p->add_random = sqlcipher_go_add_random;
+	p->random = sqlcipher_go_random;
+	p->hmac = sqlcipher_go_hmac;
+	p->kdf = sqlcipher_go_kdf;
+	p->cipher = sqlcipher_go_cipher;
+	p->get_cipher = sqlcipher_go_get_cipher;
+	p->get_key_sz = sqlcipher_go_get_key_sz;
+	p->get_iv_sz = sqlcipher_go_get_iv_sz;
+	p->get_block_sz = sqlcipher_go_get_block_sz;
+	p->get_hmac_sz = sqlcipher_go_get_hmac_sz;
+	p->ctx_init = sqlcipher_go_ctx_init;
+	p->ctx_free = sqlcipher_go_ctx_free;
+	p->fips_status = sqlcipher_go_fips_status;
+	p->get_provider_version = sqlcipher_go_get_provider_version;
+	return SQLITE_OK;
+}
+
+#endif
diff --git src/crypto_impl.c src/crypto_impl.c
index 9dffb5f9..0e735fa1 100644
--- src/crypto_impl.c
+++ src/crypto_impl.c
@@ -213,6 +213,9 @@ void sqlcipher_activate() {
 #if defined (SQLCIPHER_CRYPTO_CC)
     extern int sqlcipher_cc_setup(sqlcipher_provider *p);
     sqlcipher_cc_setup(p);
+#elif defined (SQLCIPHER_CRYPTO_GO)
+    extern int sqlcipher_go_setup(sqlcipher_provider *p);
+    sqlcipher_go_setup(p);
 #elif defined (SQLCIPHER_CRYPTO_LIBTOMCRYPT)
     extern int sqlcipher_ltc_setup(sqlcipher_provider *p);
     sqlcipher_ltc_setup(p);
diff --git tool/mksqlite3c.tcl tool/mksqlite3c.tcl
index f278d0d8..4269b54b 100644
--- tool/mksqlite3c.tcl
+++ tool/mksqlite3c.tcl
@@ -414,6 +414,7 @@ set flist {
 
    crypto.c
    crypto_impl.c
+   crypto_go.c
    crypto_libtomcrypt.c
    crypto_nss.c
    crypto_openssl.c
