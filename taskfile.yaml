# yaml-language-server: $schema=https://taskfile.dev/schema.json
# https://taskfile.dev

version: "3"

vars:
  SQLCIPHER_RELEASE_TAG: v4.5.7

  VCPKG_BOOTSTRAP_BAT: "{{.TASKFILE_DIR}}/external/vcpkg/bootstrap-vcpkg.bat"
  VCPKG_BOOTSTRAP_SH: "{{.TASKFILE_DIR}}/external/vcpkg/bootstrap-vcpkg.sh"
  VCPKG_EXE: "{{.TASKFILE_DIR}}/external/vcpkg/vcpkg.exe"

  RUN_WINDOWS: 'cmd /d /c'
  RUN_UNIX: 'sh -c'
  RUN: '{{if eq OS "windows"}}{{.RUN_WINDOWS}}{{ else }}{{.RUN_UNIX}}{{ end }}'

  MSBUILD_EXE_RAW:
    sh: |
      strings=("Preview" "Enterprise" "Professional" "Community")
      for str in "${strings[@]}"
      do
        result="C:/Program Files/Microsoft Visual Studio/2022/${str}/MSBuild/Current/Bin/amd64/MSBuild.exe"
        if [ -e "$result" ]; then
          echo "$result"
          break
        fi
      done
  MSBUILD_EXE: '{{fromSlash .MSBUILD_EXE_RAW}}'
  GORELEASER: 'goreleaser'

  BUILD_INT_DIR: "{{.TASKFILE_DIR}}/dist"
  BUILD_DIR: "{{fromSlash .BUILD_INT_DIR}}"

env:
  VCPKG_DISABLE_METRICS: 1

tasks:
  default:
    cmds:
      - task: build

  clean:
    cmds:
      - task: delete
        vars: { TARGET_DIR: '{{.BUILD_DIR}}' }

  build:
    deps: [sqlcipher, goreleaser-install]
    preconditions:
      - '"{{ fromSlash .GORELEASER }}" --version'
    sources:
      - .goreleaser.yaml
      - pkg/**/*.go
      - go.mod
      - go.sum
      - main.go
    generates:
      - 'dist/config.yaml'
      - 'dist/metadata.json'
      - 'dist/artifacts.json'
      - 'dist/**/sigtop'
    cmds:
      - cmd: goreleaser build --single-target --snapshot --clean

  sqlcipher:
    deps: [sqlcipher-compile]
    sources:
      - .build/bld/sqlite3.c
      - .build/bld/sqlite3.h
    generates:
      - pkg/sqlcipher/sqlite3.c
      - pkg/sqlcipher/sqlite3.h
    cmds:
      - cmd: cp .build/bld/sqlite3.c pkg/sqlcipher/sqlite3.c
      - cmd: cp .build/bld/sqlite3.h pkg/sqlcipher/sqlite3.h

  sqlcipher-clone:
    deps: [git-submodule-init]
    status:
      - test -d .build/sqlcipher/
      - test -f .build/sqlcipher/.git/index
      - test -f .build/sqlcipher/.gitignore
    generates:
      - .build/sqlcipher/.git/index
      - .build/sqlcipher/.gitignore
    cmds:
      - cmd: mkdir -p "{{ joinPath .TASKFILE_DIR ".build" }}"
      - cmd: |
          if [ ! test -d "{{ joinPath .TASKFILE_DIR ".build" "sqlcipher" }}" ]; then
            git clone -b "{{.SQLCIPHER_RELEASE_TAG}}" https://github.com/sqlcipher/sqlcipher.git "{{ joinPath .TASKFILE_DIR ".build" "sqlcipher" }}"
          fi

  sqlcipher-patched:
    deps: [sqlcipher-clone]
    sources:
      - pkg/sqlcipher/sqlcipher.diff
    generates:
      - .build/sqlcipher/Makefile.in
      - .build/sqlcipher/src/crypto.h
      - .build/sqlcipher/src/crypto_go.c
      - .build/sqlcipher/src/crypto_impl.c
      - .build/sqlcipher/tool/mksqlite3c.tcl
    cmds:
      - cmd: |
          git -C "{{ joinPath .TASKFILE_DIR ".build" "sqlcipher" }}" clean -xfd
      - cmd: |
          git -C "{{ joinPath .TASKFILE_DIR ".build" "sqlcipher" }}" reset --hard "{{.SQLCIPHER_RELEASE_TAG}}"
      - cmd: |
          patch \
            --directory="{{ joinPath .TASKFILE_DIR ".build" "sqlcipher" }}" \
            --verbose \
            --strip=0 \
            --batch \
            -i "{{ joinPath .TASKFILE_DIR "pkg" "sqlcipher" "sqlcipher.diff" }}"

  sqlcipher-configure:
    deps: [sqlcipher-patched]
    sources:
      - .build/sqlcipher/configure
    generates:
      - .build/bld/Makefile
    vars:
      BUILD_DIR: '{{ joinPath .TASKFILE_DIR ".build" }}'
      CONFIGURE: '{{ joinPath .TASKFILE_DIR ".build" "sqlcipher" "configure" }}'
    cmds:
      - cmd: |
          mkdir -p  "{{ fromSlash .BUILD_DIR }}"
          cd  "{{ fromSlash .BUILD_DIR }}"
          "{{ fromSlash .CONFIGURE }}" \
            --enable-tempstore=yes CFLAGS=-DSQLITE_HAS_CODEC

  sqlcipher-compile:
    deps: [sqlcipher-configure]
    sources:
      - .build/bld/Makefile
      - .build/sqlcipher/**/*.c
      - .build/sqlcipher/**/*.h
    generates:
      - .build/bld/sqlite3.c
      - .build/bld/sqlite3.h
    cmds:
      - cmd: |
          cd .build/bld/
          make sqlite3.c

  goreleaser-install:
    deps: [goreleaser-install-brew]
    desc: Install goreleaser
    preconditions:
      - go version
    status:
      - goreleaser --version
    cmds:
      - cmd: go install github.com/goreleaser/goreleaser@latest

  goreleaser-install-brew:
    internal: true
    desc: Install goreleaser using brew
    platforms: [darwin, linux]
    status:
      - 'goreleaser --version'
    cmds:
      - cmd: brew install goreleaser/tap/goreleaser

  scoop-install:
    desc: Install libraries with scoop
    status:
      - 'scoop --version'
    cmds:
      - cmd: pwsh -NoProfile -Command 'iex "& {$(irm get.scoop.sh)} -RunAsAdmin"'
        platforms: [windows]
        ignore_error: true
      - cmd: pwsh -NoProfile -Command 'Join-Path (Resolve-Path ~).Path "scoop/shims" >> $Env:GITHUB_PATH'
        platforms: [windows]
        ignore_error: true

  git-submodule-init:
    sources:
      - .gitmodules
    generates:
      - .build/logs/git-submodule-init.log
    cmds:
      - cmd: |
          git -C "{{.TASKFILE_DIR}}" submodule update --init --recursive
      - cmd: |
          mkdir -p .build/logs
          touch .build/logs/git-submodule-init.log

  vcpkg-integrate:
    deps: [vcpkg-download]
    internal: true
    cmds:
      - cmd: '{{.RUN}} "{{ fromSlash .VCPKG_EXE }}" integrate install'

  vcpkg-download:
    deps: [git-submodule-init]
    status:
      - 'test -f "{{.VCPKG_EXE}}"'
    cmds:
      - cmd: '{{.RUN}} "{{ fromSlash .VCPKG_BOOTSTRAP_BAT }}" -disableMetrics'

  delete:
    internal: true
    requires: { vars: [TARGET_DIR] }
    status:
      - 'test ! -d "{{.TARGET_DIR}}"'
    cmds:
      - cmd: '{{.RUN}} if exist "{{.TARGET_DIR}}" rmdir /s /q "{{.TARGET_DIR}}"'
        platforms: [windows]
      - cmd: '{{.RUN}} rm -rf "{{.TARGET_DIR}}"'
        platforms: [linux, darwin]
